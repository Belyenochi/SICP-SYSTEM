;;name: prime? arguments:x
(define (small-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
         ((divides? test-divisor n) test-divisor)
         (else (find-divisor n (+ test-divisor 1)))))

(define (divides? a b)
  (= (remainder b a) 0))

(define (prime? n)
  (= n (smallest-divisor n)))

(define (remainder2 x num)
  (if (< x num)
     x
     (remainder2 (- x num) num)))
;; ===========================
(define (force2 delayed-object)
  (delayed-object))

(define (memo-proc proc)
  (let ((already-run? #f) (result #f))
    (lambda ()
      (if (not already-run?)
         (begin (set! result (proc))
                 (set! already-run? #t)
                 result)
         result))))

(define (delay proc)
  (memo-proc (lambda () proc)))

(define the-empty-stream '())

(define (stream-null? stream)
  (eq? '() stream))

(define (cons-stream a b)
  (cons a (delay b)))

(define (stream-ref s n)
  (if (= n 0)
     (stream-car s)
     (stream-ref (stream-cdr s) (- n 1))))

;(define (stream-map proc s)
;  (if (stream-null? s)
;     the-empty-stream
;     (cons-stream (proc (stream-car s))
;                    (stream-map proc (stream-cdr s)))))

(define (stream-for-each proc s)
  (if (stream-null? s)
     'done
     (begin (proc (stream-car s))
             (stream-for-each proc (stream-cdr s)))))

(define (display-stream s)
  (stream-for-each display-line s))

(define (display-line x)
  (newline)
  (display x))

;; (cons-stream <a><b>)
;; (cons <a> (delay <b>))
(define (stream-car stream) (car stream))
(define (stream-cdr stream) (force2 (cdr stream)))

;(stream-car
; (stream-cdr
;  (stream-filter prime?
;                (stream-enumerate-interval 10000 1000000))))

(define (stream-enumerate-interval low high)
  (if (> low high)
     the-empty-stream
     (cons-stream
      low
      (stream-enumerate-interval (+ low 1) high))))

(define (stream-filter pred stream)
  (cond ((stream-null? stream) the-empty-stream)
         ((pred (stream-car stream))
          (cons-stream (stream-car stream)
                         (stream-filter pred
                                       (stream-cdr stream))))
         (else (stream-filter pred (stream-cdr stream)))))

  ;(lambda () proc))


(define (stream-map proc . argstreams)
  (if (stream-null? (car argstreams))
      the-empty-stream
      (cons-stream
        (apply proc (map stream-car argstreams))
        (apply stream-map 
               (cons proc (map stream-cdr argstreams))))))

;;==========3.50 Test=================
;(define one-to-ten (stream-enumerate-interval 1 10)) 

;(stream-map + one-to-ten one-to-ten)

;(display-stream (stream-map + one-to-ten one-to-ten))
;;==========3.51 Test=================
(define (show x)
  (display-line x)
  x)

(define x (stream-map show (stream-enumerate-interval 0 10)))
(display "x:")
x
(stream-ref x 5)
(display "x:")
x
(stream-ref x 7)
(display "x:")
x
;===========3.52 Test=================
(define sum 0)

(define (accum x)
  (set! sum (+ x sum))
  sum)

(define seq (stream-map accum (stream-enumerate-interval 1 20)))
;(display "sum:")
;sum
(define y (stream-filter even? seq))

(define z (stream-filter (lambda (x) (= (remainder x 5) 0))
                        seq))
;(display "stream-ref")
;(stream-ref y 7)
;(display "display-stream")
;(display-stream z)

